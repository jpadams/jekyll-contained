on:
  [push, pull_request]

name: Build

env:
  AWS_REGION: eu-west-1
  CLUSTER: jekyll-contained
  SERVICE: jekyll-contained

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1.0.0

    - name: Setup AWS
      run: |
        mkdir "${RUNNER_TEMP}/.aws"
        export AWS_CONFIG_FILE="${RUNNER_TEMP}/.aws/config"
        export AWS_SHARED_CREDENTIALS_FILE="${RUNNER_TEMP}/.aws/credentials"
        aws configure set default.region $AWS_REGION
        aws configure set default.output json
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws sts get-caller-identity
        # Login to AWS ECR
        $( aws ecr get-login --region $AWS_REGION --no-include-email )

    - name: Setup ECR
      run: |
        # Configure environment to use the runner's AWS config
        export AWS_CONFIG_FILE="${RUNNER_TEMP}/.aws/config"
        export AWS_SHARED_CREDENTIALS_FILE="${RUNNER_TEMP}/.aws/credentials"
        # Login to AWS ECR
        $( aws ecr get-login --region $AWS_REGION --no-include-email )

    - name: Build, tag, and push image
      run: |
        # Configure environment to use the runner's AWS config
        export AWS_CONFIG_FILE="${RUNNER_TEMP}/.aws/config"
        export AWS_SHARED_CREDENTIALS_FILE="${RUNNER_TEMP}/.aws/credentials"
        # Build and tag the image
        docker build \
          -t jekyll-contained:$GITHUB_SHA \
          -t $GITHUB_REPOSITORY:$GITHUB_SHA \
          -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/jekyll-contained:$GITHUB_SHA .
        # Save the image so it can be uploaded as an artifact
        docker save jekyll-contained:$GITHUB_SHA | gzip > ./jekyll-contained.tar.gz
        # Push image to AWS ECR
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/jekyll-contained:$GITHUB_SHA

    - name: Render task definition
      run: |
        # Update task-definition with new image
        export IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/jekyll-contained:$GITHUB_SHA
        cat .aws/task-definition.json \
          | jq '.containerDefinitions[0].image |= env.IMAGE' \
          > "${RUNNER_TEMP}/task-definition.json"

    - name: Register task definition
      run: |
        # Configure environment to use the runner's AWS config
        export AWS_CONFIG_FILE="${RUNNER_TEMP}/.aws/config"
        export AWS_SHARED_CREDENTIALS_FILE="${RUNNER_TEMP}/.aws/credentials"
        # Register the new task-definition
        TASK_DEFINITION_ARN=$( aws ecs register-task-definition \
          --cli-input-json file://"${RUNNER_TEMP}/task-definition.json" \
          | jq -r '.taskDefinition.taskDefinitionArn' )
        # Deploy new task definition to the existing service
        aws ecs update-service --cluster $CLUSTER --service $SERVICE --task-definition $TASK_DEFINITION_ARN

    - name: Wait for services to stabilize
      run: |
        # Configure environment to use the runner's AWS config
        export AWS_CONFIG_FILE="${RUNNER_TEMP}/.aws/config"
        export AWS_SHARED_CREDENTIALS_FILE="${RUNNER_TEMP}/.aws/credentials"
        # Wait for services to stabilize
        aws ecs wait services-stable --cluster $CLUSTER --services $SERVICE

    - name: Report public web address
      run: |
        # Configure environment to use the runner's AWS config
        export AWS_CONFIG_FILE="${RUNNER_TEMP}/.aws/config"
        export AWS_SHARED_CREDENTIALS_FILE="${RUNNER_TEMP}/.aws/credentials"
        # Get the task ARN
        TASK_ARN=$( aws ecs list-tasks --cluster $CLUSTER | jq -r '.taskArns[0]' )
        # Get the network interface id
        NETWORK_INTERFACE_ID=$( aws ecs describe-tasks --cluster $CLUSTER --tasks $TASK_ARN \
          | jq -r '.tasks[0].attachments[0].details[] | select(.name == "networkInterfaceId") | .value' )
        # Get the public IP etc
        aws ec2 describe-network-interfaces --network-interface-ids $NETWORK_INTERFACE_ID \
          | jq -r '.NetworkInterfaces[0].Association | .PublicDnsName, .PublicIp'
